import { getUserByEmail } from '@/app/db/user';
import { signInSchema } from '@/app/lib/schemas';
import bcrypt from 'bcrypt';
import NextAuth, { NextAuthConfig } from 'next-auth';
import { DEFAULT_LOGIN_REDIRECT, authRoutes, publicRoutes } from './routes';
import { prismadb } from './globals/db';
import { PrismaAdapter } from "@auth/prisma-adapter"

import Credentials from 'next-auth/providers/credentials';
import github from 'next-auth/providers/github';

export const authConfig:NextAuthConfig = {
    basePath: '/api/auth',    
    adapter: PrismaAdapter(prismadb),
    // session:{strategy: 'jwt'}, //JWT利用によりサーバーメモリ節約

    //callback middleware的な役割。middleware.tsはrequestが処理される前に機能する
    callbacks: { 
      authorized({request, auth}){ //認証前後の制約について設定する request情報 auth認証情報オブジェクト 

        try{
          const {pathname} = request.nextUrl; //nextUrl 現在のリクエストのURL情報を表すオブジェクトからpathname(=URL)を分割代入
          if(pathname === '/mypage') return !!auth;
          return true;

        }catch(err){
          console.log(err);
        }

  
      },
      // jwt({token, trigger, session}){
      //   if(trigger === 'update')token.name = session.user.name;
      //   return token;
      // },
      

    },

  providers: [
  //パスワード認証
    Credentials({
      async authorize(credentials) {
        const parsedCredentials = signInSchema.safeParse(credentials);

        if (parsedCredentials.success) {
          const { email, password } = parsedCredentials.data;
          const user = await getUserByEmail(email);

          if (!user) return null;

          const passwordMatch = await bcrypt.compare(password, user.password);

          if (passwordMatch) return user;
        }
        return null;
      },
    }),

  //OAuth設定
    github({
      clientId: process.env.AUTH_GITHUB_ID,
      clientSecret:process.env.AUTH_GITHUB_SECRET,
    }),

  ],

};

export const {handlers, auth, signIn, signOut} = NextAuth(authConfig);

/*  
=======auth のプロパティ========
user: ログインしているユーザーの情報
{
  name: ユーザーの表示名
  email: ユーザーのメールアドレス
  image: ユーザーのプロフィール画像URL（設定されている場合）
  id: ユーザーの一意識別子（データベースのIDなど）
}

expires: セッションの有効期限（ISO 8601形式の日時文字列）
accessToken: OAuth プロバイダから提供されるアクセストークン（使用している場合）
refreshToken: アクセストークンを更新するためのリフレッシュトークン（使用している場合）
error: 認証エラーが発生した場合のエラー情報

========requetのプロパティ========
nextUrl: 現在のリクエストのURL情報（URL オブジェクト）

pathname: URLのパス部分
search: クエリ文字列
searchParams: クエリパラメータ（URLSearchParams オブジェクト）
host: ホスト名
protocol: プロトコル（'http:' or 'https:'）


headers: リクエストヘッダー（Headers オブジェクト）

get(name): 特定のヘッダーの値を取得
has(name): 特定のヘッダーの存在を確認


cookies: リクエストのクッキー（RequestCookies オブジェクト）

get(name): 特定のクッキーの値を取得
getAll(): すべてのクッキーを取得


method: HTTPメソッド（'GET', 'POST'など）
url: リクエストの完全なURL文字列
body: リクエストボディ（POSTリクエストの場合）
geo: クライアントの地理情報（設定されている場合）

city: 都市名
country: 国名
region: 地域名


ip: クライアントのIPアドレス

*/